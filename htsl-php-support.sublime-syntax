%YAML 1.2
---
name: HTSL PHP Support
hidden: true
scope: support.php.htsl
variables:
  identifier_start: '[[:alpha:]_]'
  identifier: '\b{{identifier_start}}[[:alnum:]_]*\b'
  path: '\\?({{identifier}}\\)*{{identifier}}'
  sql_indicator: \s*(?:SELECT|INSERT|UPDATE|DELETE|CREATE|REPLACE|ALTER)\b

contexts:
  main:
    - include: expressions

  expressions:
    - include: closure
    - include: invoke-call
    - match: |-
        (?x)\s*(?=
            [[:alnum:]_$\\]+(::)
            (?:
                ({{identifier}})\s*\(
                |
                ((\$+){{identifier}})
                |
                ({{identifier}})
            )?
        )
      push:
        - match: (::)({{identifier}})(?=\s*\()
          scope: meta.function-call.static.php
          captures:
            1: keyword.operator.class.php
            2: variable.function.php
          set: function-call-parameters
        - match: |-
            (?x)(::)
            (?:
                (class)\b
                |
                ((\$+){{identifier}})
                |
                ({{identifier}})
            )?
          captures:
            1: keyword.operator.class.php
            2: constant.class.php
            3: variable.other.class.php
            4: punctuation.definition.variable.php
            5: constant.other.class.php
          pop: true
        - match: (self|static|parent)\b
          scope: variable.language.php
        - include: class-name
        - include: variables
    - include: variables
    - include: strings
    - match: (array)(\()(\))
      scope: meta.array.empty.php
      captures:
        1: support.function.construct.php
        2: punctuation.section.array.begin.php
        3: punctuation.section.array.end.php
    - match: (array)(\()
      captures:
        1: support.function.construct.php
        2: punctuation.section.array.begin.php
      push:
        - meta_scope: meta.array.php
        - match: \)
          scope: punctuation.section.array.end.php
          pop: true
        - include: expressions
    - match: (?i)\s*\(\s*(array|real|double|float|int(eger)?|bool(ean)?|string|object|binary|unset)\s*\)
      captures:
        1: storage.type.php
    - match: (?i)\b(array|real|double|float|int(eger)?|bool(ean)?|string|class|clone|var|function|interface|object)\b
      scope: storage.type.php
    - match: (?i)\b(parent|self)\b
      scope: variable.language.php
    - match: (?i)\b(global|abstract|const|extends|implements|final|p(r(ivate|otected)|ublic)|static)\b
      scope: storage.modifier.php
    - include: object
    - match: ;
      scope: punctuation.terminator.expression.php
    - match: \.=?
      scope: keyword.operator.string.php
    - match: "=>"
      scope: keyword.operator.key.php
    - match: '(?:(\=)(&))|(&(?=[[:alpha:]$_]))'
      captures:
        1: keyword.operator.assignment.php
        2: storage.modifier.reference.php
        3: storage.modifier.reference.php
    - match: (@)
      scope: keyword.operator.error-control.php
    - match: (\-\-|\+\+)
      scope: keyword.operator.increment-decrement.php
    - match: (\-|\+|\*|/|%)
      scope: keyword.operator.arithmetic.php
    - match: (?i)(!|&&|\|\|)|\b(and|or|xor|as)\b
      scope: keyword.operator.logical.php
    - include: function-call
    - match: '<<|>>|~|\^|&|\|'
      scope: keyword.operator.bitwise.php
    - match: (===|==|!==|!=|<=|>=|<>|<|>)
      scope: keyword.operator.comparison.php
    - match: "="
      scope: keyword.operator.assignment.php
    - match: '(?i)\b(instanceof)\b\s+(?=[[:alpha:]\\$_])'
      captures:
        1: keyword.operator.type.php
      push:
        - match: '(?=[^[:alnum:]_\\$])'
          pop: true
        - include: class-name
        - include: variables
    - include: numbers
    - match: '(?i)(goto)\s+({{identifier}})'
      captures:
        1: keyword.control.goto.php
        2: support.other.php
    - include: string-backtick
    - match: '(\[)\s*(\])'
      scope: meta.array.empty.php
      captures:
        1: punctuation.section.array.begin.php
        2: punctuation.section.array.end.php
    - match: '\['
      scope: punctuation.section.array.begin.php
      push:
        - meta_scope: meta.array.php
        - match: '\]'
          scope: punctuation.section.array.end.php
          pop: true
        - include: expressions
    - include: constants
    - match: \(
      scope: punctuation.section.group.begin.php
      push:
        - meta_scope: meta.group.php
        - match: \)
          scope: punctuation.section.group.end.php
          pop: true
        - include: expressions


  closure:
    - match: (?i)\b(function)\s*(&)?\s*(?=\()
      scope: meta.function.closure.php
      captures:
        1: storage.type.function.php
        2: storage.modifier.reference.php
      push:
        - match: \(
          scope: meta.function.parameters.php meta.group.php punctuation.section.group.begin.php
          set: function-parameters

  function-parameters:
    - meta_content_scope: meta.function.parameters.php meta.group.php
    - match: '\)'
      scope: punctuation.section.group.end.php
      set:
        - meta_content_scope: meta.function.php
        - match: '\b(use)\b\s*(\()'
          scope: meta.function.closure.use.php
          captures:
            1: keyword.other.function.use.php
            2: punctuation.section.group.begin.php
          set: function-use
        - match: '(?=:)'
          set: function-return-type
        - match: \{
          scope: meta.block.php punctuation.section.block.begin.php
          set: function-body
        # Exit on unexpected content
        - match: (?=\S)
          pop: true
    - include: comments
    - match: \b(array|callable|int|string|bool|float)\b
      scope: storage.type.php
    # Class name type hint
    - match: '{{identifier}}'
      scope: meta.path.php support.class.php
    - match: '&'
      scope: storage.modifier.reference.php
    - match: (\$+){{identifier}}
      scope: variable.parameter.php
      captures:
        1: punctuation.definition.variable.php
    - match: ','
      scope: punctuation.separator.php
    - match: '='
      scope: keyword.operator.assignment.php
      push:
        - match: '(?=,|\))'
          pop: true
        - include: expressions

  function-use:
      - meta_content_scope: meta.function.closure.use.php
      - include: comments
      - match: '\)'
        scope: punctuation.section.group.end.php
        set:
          - meta_content_scope: meta.function.php
          - match: '(?=:)'
            set: function-return-type
          - match: \{
            scope: meta.block.php punctuation.section.block.begin.php
            set: function-body
          # Exit on unexpected content
          - match: (?=\S)
            pop: true
      - match: '&'
        scope: storage.modifier.reference.php
      - match: '(\$+){{identifier}}'
        scope: variable.parameter.php
        captures:
          1: punctuation.definition.variable.php
      - match: ','
        scope: punctuation.separator.php

  function-return-type:
    - meta_content_scope: meta.function.return-type.php
    - match: '(?=;)'
      pop: true
    - match: \{
      scope: meta.block.php punctuation.section.block.begin.php
      set: function-body
    - match: ':'
      scope: punctuation.separator.php
    - match: \b(array|bool|int|float|string)\b
      scope: storage.type.php
    - include: class-builtin
    - include: identifier-parts-as-path
    - match: '(\\)?({{identifier}})(?!\\)'
      scope: meta.path.php
      captures:
        1: punctuation.separator.namespace.php
        2: support.class.php
    # Exit on unexpected content
    - match: (?=\S)
      pop: true

  function-body:
    - meta_content_scope: meta.function.php meta.block.php
    - match: \}
      scope: meta.function.php meta.block.php punctuation.section.block.end.php
      pop: true
    - include: embedded-html
    - match: '\{'
      scope: punctuation.section.block.begin.php
      push: block
    - include: statements

  block:
    - match: '\}'
      scope: punctuation.section.block.end.php
      pop: true
    - match: '\{'
      scope: punctuation.section.block.begin.php
      push: block
    - include: embedded-html
    - include: statements

  invoke-call:
    - match: '(\$+)({{identifier}})(?=\s*\()'
      scope: meta.function-call.invoke.php
      captures:
        1: punctuation.definition.variable.php
        2: variable.other.php
      push: function-call-parameters


  variables:
    - match: (\$)((_(COOKIE|FILES|GET|POST|REQUEST))|arg(v|c))\b
      scope: variable.other.global.php
      captures:
        1: punctuation.definition.variable.php
    - match: (\$)((GLOBALS|_(ENV|SERVER|SESSION)))
      scope: variable.other.global.safer.php
      captures:
        1: punctuation.definition.variable.php
    - match: '(\$)this\b'
      scope: variable.language.php
      captures:
        1: punctuation.definition.variable.php
    - match: (\$+){{identifier}}
      scope: variable.other.php
      captures:
        1: punctuation.definition.variable.php

  variables-no-item-access:
    - match: (\$)((_(COOKIE|FILES|GET|POST|REQUEST))|arg(v|c))\b
      scope: variable.other.global.php
      captures:
        1: punctuation.definition.variable.php
    - match: (\$)((GLOBALS|_(ENV|SERVER|SESSION)))
      scope: variable.other.global.safer.php
      captures:
        1: punctuation.definition.variable.php
    - match: '(\$)this\b'
      scope: variable.language.php
      captures:
        1: punctuation.definition.variable.php
    - match: (\$+){{identifier}}
      scope: variable.other.php
      captures:
        1: punctuation.definition.variable.php

  regex-double-quoted:
    - match: '(?x)"/ (?= (\\.|[^"/])+/[imsxeADSUXu]*" )'
      scope: punctuation.definition.string.begin.php
      push:
        - meta_scope: string.regexp.double-quoted.php
        - match: '(/)([imsxeADSUXu]*)(")'
          scope: punctuation.definition.string.end.php
          pop: true
        # Escaped from the regexp – there can also be 2 backslashes (since 1 will escape the first)
        - match: '(\\){1,2}[.$^\[\]{}]'
          scope: constant.character.escape.regex.php
        - include: interpolation
        - match: '(\{)\d+(,\d+)?(\})'
          scope: string.regexp.arbitrary-repetition.php
          captures:
            1: punctuation.definition.arbitrary-repetition.php
            3: punctuation.definition.arbitrary-repetition.php
        - match: '\[(?:\^?\])?'
          scope: punctuation.definition.character-class.php
          push:
            - meta_scope: string.regexp.character-class.php
            - match: '\]'
              scope: punctuation.definition.character-class.php
              pop: true
            - include: interpolation
        - match: "[$^+*]"
          scope: keyword.operator.regexp.php

  regex-single-quoted:
    - match: '(?x)''/ (?= (\\.|[^''/])+/[imsxeADSUXu]*'' )'
      scope: punctuation.definition.string.begin.php
      push:
        - meta_scope: string.regexp.single-quoted.php
        - match: "(/)([imsxeADSUXu]*)(')"
          scope: punctuation.definition.string.end.php
          pop: true
        - match: '(\{)\d+(,\d+)?(\})'
          scope: string.regexp.arbitrary-repetition.php
          captures:
            1: punctuation.definition.arbitrary-repetition.php
            3: punctuation.definition.arbitrary-repetition.php
        # Escaped from the regexp – there can also be 2 backslashes (since 1 will escape the first)
        - match: '(\\){1,2}[.$^\[\]{}]'
          scope: constant.character.escape.regex.php
        # Escaped from the PHP string – there can also be 2 backslashes (since 1 will escape the first)
        - match: '\\{1,2}[\\'']'
          scope: constant.character.escape.php
        - match: '\[(?:\^?\])?'
          scope: punctuation.definition.character-class.php
          push:
            - meta_scope: string.regexp.character-class.php
            - match: '\]'
              scope: punctuation.definition.character-class.php
              pop: true
            - match: '\\[\\''\[\]]'
              scope: constant.character.escape.php
        - match: "[$^+*]"
          scope: keyword.operator.regexp.php

  string-backtick:
    - match: "`"
      scope: punctuation.definition.string.begin.php
      push:
        - meta_scope: string.interpolated.php
        - match: "`"
          scope: punctuation.definition.string.end.php
          pop: true
        - match: \\.
          scope: constant.character.escape.php
        - include: interpolation

  string-double-quoted:
    - match: '"'
      scope: punctuation.definition.string.begin.php
      push:
        - meta_scope: string.quoted.double.php
        - meta_content_scope: meta.string-contents.quoted.double.php
        - match: '(?={{sql_indicator}})'
          set:
            - meta_scope: string.quoted.double.php
            - meta_content_scope: meta.string-contents.quoted.double.php
            - match: '"'
              scope: punctuation.definition.string.end.php
              pop: true
            - match: ''
              with_prototype:
                - match: '(?=")'
                  pop: true
                - include: interpolation
              push: 'scope:source.sql'
        - match: '(?=\S)'
          set:
            - meta_scope: string.quoted.double.php
            - meta_content_scope: meta.string-contents.quoted.double.php
            - match: '"'
              scope: punctuation.definition.string.end.php
              pop: true
            - include: interpolation

  string-single-quoted:
    - match: "'"
      scope: punctuation.definition.string.begin.php
      push:
        - meta_scope: string.quoted.single.php
        - meta_content_scope: meta.string-contents.quoted.single.php
        - match: '(?={{sql_indicator}})'
          set:
            - meta_scope: string.quoted.single.php
            - meta_content_scope: meta.string-contents.quoted.single.php
            - match: "'"
              scope: punctuation.definition.string.end.php
              pop: true
            - match: ''
              with_prototype:
                - match: "(?=')"
                  pop: true
                - match: '\\[\\'']'
                  scope: constant.character.escape.php
              push: 'scope:source.sql'
        - match: '(?=\S)'
          set:
            - meta_scope: string.quoted.single.php
            - meta_content_scope: meta.string-contents.quoted.single.php
            - match: "'"
              scope: punctuation.definition.string.end.php
              pop: true
            - match: '\\[\\'']'
              scope: constant.character.escape.php

  strings:
    - include: regex-double-quoted
    - include: string-double-quoted
    - include: regex-single-quoted
    - include: string-single-quoted

  class-name:
    - match: '(?={{path}})'
      push:
        - meta_scope: meta.path.php
        - include: class-builtin
        - include: identifier-parts
        - match: '(\\)?({{identifier}})(?!\\)'
          captures:
            1: punctuation.separator.namespace.php
            2: support.class.php
          pop: true
        - match: ''
          pop: true

  object:
    - match: '(->)(\$?\{)'
      captures:
        1: keyword.operator.class.php
        2: punctuation.definition.variable.php
      push:
        - match: '(\})'
          captures:
            1: punctuation.definition.variable.php
          pop: true
        - include: expressions
    - match: (->)({{identifier}})(?=\s*\()
      scope: meta.function-call.method.php
      captures:
        1: keyword.operator.class.php
        2: variable.function.php
      push: function-call-parameters
    - match: (->)((\$+)?{{identifier}})?
      captures:
        1: keyword.operator.class.php
        2: variable.other.member.php
        3: punctuation.definition.variable.php

  numbers:
    - match: '\b((0(b|B)[01]*)|(0(x|X)[0-9a-fA-F]*)|(([0-9]+\.?[0-9]*)|(\.[0-9]+))((e|E)(\+|-)?[0-9]+)?)\b'
      scope: constant.numeric.php

  constants:
    - match: (?i)\b(TRUE|FALSE|NULL|__(FILE|DIR|FUNCTION|CLASS|METHOD|LINE|NAMESPACE)__|ON|OFF|YES|NO|NL|BR|TAB)\b
      scope: constant.language.php
    - match: (?=\\?{{identifier}}\\{{path}})
      push:
        - meta_scope: meta.path.php
        - include: identifier-parts
        - match: '(\\)?({{identifier}})(?!\\)'
          captures:
            1: punctuation.separator.namespace.php
            2: constant.other.php
          pop: true
    - match: '(?=\\?[[:alpha:]_])'
      push:
        - match: '(?=[^\\_[:alnum:]])'
          pop: true
        - match: (\\)?\b(STD(IN|OUT|ERR)|ZEND_(THREAD_SAFE|DEBUG_BUILD)|DEFAULT_INCLUDE_PATH|P(HP_(R(OUND_HALF_(ODD|DOWN|UP|EVEN)|ELEASE_VERSION)|M(INOR_VERSION|A(XPATHLEN|JOR_VERSION))|BINDIR|S(HLIB_SUFFIX|YSCONFDIR|API)|CONFIG_FILE_(SCAN_DIR|PATH)|INT_(MAX|SIZE)|ZTS|O(S|UTPUT_HANDLER_(START|CONT|END))|D(EBUG|ATADIR)|URL_(SCHEME|HOST|USER|P(ORT|A(SS|TH))|QUERY|FRAGMENT)|PREFIX|E(XT(RA_VERSION|ENSION_DIR)|OL)|VERSION(_ID)?|WINDOWS_(NT_(SERVER|DOMAIN_CONTROLLER|WORKSTATION)|VERSION_(M(INOR|AJOR)|BUILD|S(UITEMASK|P_M(INOR|AJOR))|P(RODUCTTYPE|LATFORM)))|L(IBDIR|OCALSTATEDIR))|EAR_(INSTALL_DIR|EXTENSION_DIR))|E_(RECOVERABLE_ERROR|STRICT|NOTICE|CO(RE_(ERROR|WARNING)|MPILE_(ERROR|WARNING))|DEPRECATED|USER_(NOTICE|DEPRECATED|ERROR|WARNING)|PARSE|ERROR|WARNING|ALL))\b
          scope: support.constant.core.php
          captures:
            1: punctuation.separator.namespace.php
        - match: (\\)?\b(RADIXCHAR|GROUPING|M(_(1_PI|SQRT(1_2|2|3|PI)|2_(SQRTPI|PI)|PI(_(2|4))?|E(ULER)?|L(N(10|2|PI)|OG(10E|2E)))|ON_(GROUPING|1(1|2|0)?|7|2|8|THOUSANDS_SEP|3|DECIMAL_POINT|9|4|5|6))|S(TR_PAD_(RIGHT|BOTH|LEFT)|ORT_(REGULAR|STRING|NUMERIC|DESC|LOCALE_STRING|ASC)|EEK_(SET|CUR|END))|H(TML_(SPECIALCHARS|ENTITIES)|ASH_HMAC)|YES(STR|EXPR)|N(_(S(IGN_POSN|EP_BY_SPACE)|CS_PRECEDES)|O(STR|EXPR)|EGATIVE_SIGN|AN)|C(R(YPT_(MD5|BLOWFISH|S(HA(256|512)|TD_DES|ALT_LENGTH)|EXT_DES)|NCYSTR|EDITS_(G(ROUP|ENERAL)|MODULES|SAPI|DOCS|QA|FULLPAGE|ALL))|HAR_MAX|O(NNECTION_(NORMAL|TIMEOUT|ABORTED)|DESET|UNT_(RECURSIVE|NORMAL))|URRENCY_SYMBOL|ASE_(UPPER|LOWER))|__COMPILER_HALT_OFFSET__|T(HOUS(EP|ANDS_SEP)|_FMT(_AMPM)?)|IN(T_(CURR_SYMBOL|FRAC_DIGITS)|I_(S(YSTEM|CANNER_(RAW|NORMAL))|USER|PERDIR|ALL)|F(O_(GENERAL|MODULES|C(REDITS|ONFIGURATION)|ENVIRONMENT|VARIABLES|LICENSE|ALL))?)|D(_(T_FMT|FMT)|IRECTORY_SEPARATOR|ECIMAL_POINT|A(Y_(1|7|2|3|4|5|6)|TE_(R(SS|FC(1(123|036)|2822|8(22|50)|3339))|COOKIE|ISO8601|W3C|ATOM)))|UPLOAD_ERR_(NO_(TMP_DIR|FILE)|CANT_WRITE|INI_SIZE|OK|PARTIAL|EXTENSION|FORM_SIZE)|P(M_STR|_(S(IGN_POSN|EP_BY_SPACE)|CS_PRECEDES)|OSITIVE_SIGN|ATH(_SEPARATOR|INFO_(BASENAME|DIRNAME|EXTENSION|FILENAME)))|E(RA(_(YEAR|T_FMT|D_(T_FMT|FMT)))?|XTR_(REFS|SKIP|IF_EXISTS|OVERWRITE|PREFIX_(SAME|I(NVALID|F_EXISTS)|ALL))|NT_(NOQUOTES|COMPAT|IGNORE|QUOTES))|FRAC_DIGITS|L(C_(M(ONETARY|ESSAGES)|NUMERIC|C(TYPE|OLLATE)|TIME|ALL)|O(G_(MAIL|SYSLOG|N(O(TICE|WAIT)|DELAY|EWS)|C(R(IT|ON)|ONS)|INFO|ODELAY|D(EBUG|AEMON)|U(SER|UCP)|P(ID|ERROR)|E(RR|MERG)|KERN|WARNING|L(OCAL(1|7|2|3|4|5|0|6)|PR)|A(UTH(PRIV)?|LERT))|CK_(SH|NB|UN|EX)))|A(M_STR|B(MON_(1(1|2|0)?|7|2|8|3|9|4|5|6)|DAY_(1|7|2|3|4|5|6))|SSERT_(BAIL|CALLBACK|QUIET_EVAL|WARNING|ACTIVE)|LT_DIGITS))\b
          scope: support.constant.std.php
          captures:
            1: punctuation.separator.namespace.php
        - match: (\\)?\b(GLOB_(MARK|BRACE|NO(SORT|CHECK|ESCAPE)|ONLYDIR|ERR|AVAILABLE_FLAGS)|XML_(SAX_IMPL|HTML_DOCUMENT_NODE|N(OTATION_NODE|AMESPACE_DECL_NODE)|C(OMMENT_NODE|DATA_SECTION_NODE)|TEXT_NODE|OPTION_(SKIP_(TAGSTART|WHITE)|CASE_FOLDING|TARGET_ENCODING)|D(TD_NODE|OCUMENT_(NODE|TYPE_NODE|FRAG_NODE))|PI_NODE|E(RROR_(RECURSIVE_ENTITY_REF|MISPLACED_XML_PI|B(INARY_ENTITY_REF|AD_CHAR_REF)|SYNTAX|NO(NE|_(MEMORY|ELEMENTS))|TAG_MISMATCH|IN(CORRECT_ENCODING|VALID_TOKEN)|DUPLICATE_ATTRIBUTE|UN(CLOSED_(CDATA_SECTION|TOKEN)|DEFINED_ENTITY|KNOWN_ENCODING)|JUNK_AFTER_DOC_ELEMENT|PAR(TIAL_CHAR|AM_ENTITY_REF)|EXTERNAL_ENTITY_HANDLING|A(SYNC_ENTITY|TTRIBUTE_EXTERNAL_ENTITY_REF))|NTITY_(REF_NODE|NODE|DECL_NODE)|LEMENT_(NODE|DECL_NODE))|LOCAL_NAMESPACE|ATTRIBUTE_(N(MTOKEN(S)?|O(TATION|DE))|CDATA|ID(REF(S)?)?|DECL_NODE|EN(TITY|UMERATION)))|M(HASH_(RIPEMD(1(28|60)|256|320)|GOST|MD(2|4|5)|S(HA(1|2(24|56)|384|512)|NEFRU256)|HAVAL(1(28|92|60)|2(24|56))|CRC32(B)?|TIGER(1(28|60))?|WHIRLPOOL|ADLER32)|YSQL(_(BOTH|NUM|CLIENT_(SSL|COMPRESS|I(GNORE_SPACE|NTERACTIVE))|ASSOC)|I_(RE(PORT_(STRICT|INDEX|OFF|ERROR|ALL)|FRESH_(GRANT|MASTER|BACKUP_LOG|S(TATUS|LAVE)|HOSTS|T(HREADS|ABLES)|LOG)|AD_DEFAULT_(GROUP|FILE))|GROUP_FLAG|MULTIPLE_KEY_FLAG|B(INARY_FLAG|OTH|LOB_FLAG)|S(T(MT_ATTR_(CURSOR_TYPE|UPDATE_MAX_LENGTH|PREFETCH_ROWS)|ORE_RESULT)|E(RVER_QUERY_(NO_(GOOD_INDEX_USED|INDEX_USED)|WAS_SLOW)|T_(CHARSET_NAME|FLAG)))|N(O(_D(EFAULT_VALUE_FLAG|ATA)|T_NULL_FLAG)|UM(_FLAG)?)|C(URSOR_TYPE_(READ_ONLY|SCROLLABLE|NO_CURSOR|FOR_UPDATE)|LIENT_(SSL|NO_SCHEMA|COMPRESS|I(GNORE_SPACE|NTERACTIVE)|FOUND_ROWS))|T(YPE_(GEOMETRY|MEDIUM_BLOB|B(IT|LOB)|S(HORT|TRING|ET)|YEAR|N(ULL|EWD(ECIMAL|ATE))|CHAR|TI(ME(STAMP)?|NY(_BLOB)?)|INT(24|ERVAL)|D(OUBLE|ECIMAL|ATE(TIME)?)|ENUM|VAR_STRING|FLOAT|LONG(_BLOB|LONG)?)|IMESTAMP_FLAG)|INIT_COMMAND|ZEROFILL_FLAG|O(N_UPDATE_NOW_FLAG|PT_(NET_(READ_BUFFER_SIZE|CMD_BUFFER_SIZE)|CONNECT_TIMEOUT|INT_AND_FLOAT_NATIVE|LOCAL_INFILE))|D(EBUG_TRACE_ENABLED|ATA_TRUNCATED)|U(SE_RESULT|N(SIGNED_FLAG|IQUE_KEY_FLAG))|P(RI_KEY_FLAG|ART_KEY_FLAG)|ENUM_FLAG|A(S(SOC|YNC)|UTO_INCREMENT_FLAG)))|CRYPT_(R(C(2|6)|IJNDAEL_(1(28|92)|256)|AND)|GOST|XTEA|M(ODE_(STREAM|NOFB|C(BC|FB)|OFB|ECB)|ARS)|BLOWFISH(_COMPAT)?|S(ERPENT|KIPJACK|AFER(128|PLUS|64))|C(RYPT|AST_(128|256))|T(RIPLEDES|HREEWAY|WOFISH)|IDEA|3DES|DE(S|CRYPT|V_(RANDOM|URANDOM))|PANAMA|EN(CRYPT|IGNA)|WAKE|LOKI97|ARCFOUR(_IV)?))|S(TREAM_(REPORT_ERRORS|M(UST_SEEK|KDIR_RECURSIVE)|BUFFER_(NONE|FULL|LINE)|S(HUT_(RD(WR)?|WR)|OCK_(R(DM|AW)|S(TREAM|EQPACKET)|DGRAM)|ERVER_(BIND|LISTEN))|NOTIFY_(RE(SOLVE|DIRECTED)|MIME_TYPE_IS|SEVERITY_(INFO|ERR|WARN)|CO(MPLETED|NNECT)|PROGRESS|F(ILE_SIZE_IS|AILURE)|AUTH_RE(SULT|QUIRED))|C(RYPTO_METHOD_(SSLv(2(_(SERVER|CLIENT)|3_(SERVER|CLIENT))|3_(SERVER|CLIENT))|TLS_(SERVER|CLIENT))|LIENT_(CONNECT|PERSISTENT|ASYNC_CONNECT)|AST_(FOR_SELECT|AS_STREAM))|I(GNORE_URL|S_URL|PPROTO_(RAW|TCP|I(CMP|P)|UDP))|O(OB|PTION_(READ_(BUFFER|TIMEOUT)|BLOCKING|WRITE_BUFFER))|U(RL_STAT_(QUIET|LINK)|SE_PATH)|P(EEK|F_(INET(6)?|UNIX))|ENFORCE_SAFE_MODE|FILTER_(READ|WRITE|ALL))|UNFUNCS_RET_(STRING|TIMESTAMP|DOUBLE)|QLITE(_(R(OW|EADONLY)|MIS(MATCH|USE)|B(OTH|USY)|SCHEMA|N(O(MEM|T(FOUND|ADB)|LFS)|UM)|C(O(RRUPT|NSTRAINT)|ANTOPEN)|TOOBIG|I(NTER(RUPT|NAL)|OERR)|OK|DONE|P(ROTOCOL|ERM)|E(RROR|MPTY)|F(ORMAT|ULL)|LOCKED|A(BORT|SSOC|UTH))|3_(B(OTH|LOB)|NU(M|LL)|TEXT|INTEGER|OPEN_(READ(ONLY|WRITE)|CREATE)|FLOAT|ASSOC)))|CURL(M(SG_DONE|_(BAD_(HANDLE|EASY_HANDLE)|CALL_MULTI_PERFORM|INTERNAL_ERROR|O(UT_OF_MEMORY|K)))|SSH_AUTH_(HOST|NONE|DEFAULT|P(UBLICKEY|ASSWORD)|KEYBOARD)|CLOSEPOLICY_(SLOWEST|CALLBACK|OLDEST|LEAST_(RECENTLY_USED|TRAFFIC))|_(HTTP_VERSION_(1_(1|0)|NONE)|NETRC_(REQUIRED|IGNORED|OPTIONAL)|TIMECOND_(IF(MODSINCE|UNMODSINCE)|LASTMOD)|IPRESOLVE_(V(4|6)|WHATEVER)|VERSION_(SSL|IPV6|KERBEROS4|LIBZ))|INFO_(RE(DIRECT_(COUNT|TIME)|QUEST_SIZE)|S(SL_VERIFYRESULT|TARTTRANSFER_TIME|IZE_(DOWNLOAD|UPLOAD)|PEED_(DOWNLOAD|UPLOAD))|H(TTP_CODE|EADER_(SIZE|OUT))|NAMELOOKUP_TIME|C(ON(NECT_TIME|TENT_(TYPE|LENGTH_(DOWNLOAD|UPLOAD)))|ERTINFO)|TOTAL_TIME|PR(IVATE|ETRANSFER_TIME)|EFFECTIVE_URL|FILETIME)|OPT_(R(E(SUME_FROM|TURNTRANSFER|DIR_PROTOCOLS|FERER|AD(DATA|FUNCTION))|AN(GE|DOM_FILE))|MAX(REDIRS|CONNECTS)|B(INARYTRANSFER|UFFERSIZE)|S(S(H_(HOST_PUBLIC_KEY_MD5|P(RIVATE_KEYFILE|UBLIC_KEYFILE)|AUTH_TYPES)|L(CERT(TYPE|PASSWD)?|_(CIPHER_LIST|VERIFY(HOST|PEER))|ENGINE(_DEFAULT)?|VERSION|KEY(TYPE|PASSWD)?))|TDERR)|H(TTP(GET|HEADER|200ALIASES|_VERSION|PROXYTUNNEL|AUTH)|EADER(FUNCTION)?)|N(O(BODY|SIGNAL|PROGRESS)|ETRC)|C(RLF|O(NNECTTIMEOUT(_MS)?|OKIE(SESSION|JAR|FILE)?)|USTOMREQUEST|ERTINFO|LOSEPOLICY|A(INFO|PATH))|T(RANSFERTEXT|CP_NODELAY|IME(CONDITION|OUT(_MS)?|VALUE))|I(N(TERFACE|FILE(SIZE)?)|PRESOLVE)|DNS_(CACHE_TIMEOUT|USE_GLOBAL_CACHE)|U(RL|SER(PWD|AGENT)|NRESTRICTED_AUTH|PLOAD)|P(R(IVATE|O(GRESSFUNCTION|XY(TYPE|USERPWD|PORT|AUTH)?|TOCOLS))|O(RT|ST(REDIR|QUOTE|FIELDS)?)|UT)|E(GDSOCKET|NCODING)|VERBOSE|K(RB4LEVEL|EYPASSWD)|QUOTE|F(RESH_CONNECT|TP(SSLAUTH|_(S(SL|KIP_PASV_IP)|CREATE_MISSING_DIRS|USE_EP(RT|SV)|FILEMETHOD)|PORT|LISTONLY|APPEND)|ILE(TIME)?|O(RBID_REUSE|LLOWLOCATION)|AILONERROR)|WRITE(HEADER|FUNCTION)|LOW_SPEED_(TIME|LIMIT)|AUTOREFERER)|PRO(XY_(SOCKS(4|5)|HTTP)|TO_(S(CP|FTP)|HTTP(S)?|T(ELNET|FTP)|DICT|F(TP(S)?|ILE)|LDAP(S)?|ALL))|E_(RE(CV_ERROR|AD_ERROR)|GOT_NOTHING|MALFORMAT_USER|BAD_(C(ONTENT_ENCODING|ALLING_ORDER)|PASSWORD_ENTERED|FUNCTION_ARGUMENT)|S(S(H|L_(C(IPHER|ONNECT_ERROR|ERTPROBLEM|ACERT)|PEER_CERTIFICATE|ENGINE_(SETFAILED|NOTFOUND)))|HARE_IN_USE|END_ERROR)|HTTP_(RANGE_ERROR|NOT_FOUND|PO(RT_FAILED|ST_ERROR))|COULDNT_(RESOLVE_(HOST|PROXY)|CONNECT)|T(OO_MANY_REDIRECTS|ELNET_OPTION_SYNTAX)|O(BSOLETE|UT_OF_MEMORY|PERATION_TIMEOUTED|K)|U(RL_MALFORMAT(_USER)?|N(SUPPORTED_PROTOCOL|KNOWN_TELNET_OPTION))|PARTIAL_FILE|F(TP_(BAD_DOWNLOAD_RESUME|SSL_FAILED|C(OULDNT_(RETR_FILE|GET_SIZE|S(TOR_FILE|ET_(BINARY|ASCII))|USE_REST)|ANT_(RECONNECT|GET_HOST))|USER_PASSWORD_INCORRECT|PORT_FAILED|QUOTE_ERROR|W(RITE_ERROR|EIRD_(SERVER_REPLY|227_FORMAT|USER_REPLY|PAS(S_REPLY|V_REPLY)))|ACCESS_DENIED)|ILE(SIZE_EXCEEDED|_COULDNT_READ_FILE)|UNCTION_NOT_FOUND|AILED_INIT)|WRITE_ERROR|L(IBRARY_NOT_FOUND|DAP_(SEARCH_FAILED|CANNOT_BIND|INVALID_URL))|ABORTED_BY_CALLBACK)|VERSION_NOW|FTP(METHOD_(MULTICWD|SINGLECWD|NOCWD)|SSL_(NONE|CONTROL|TRY|ALL)|AUTH_(SSL|TLS|DEFAULT))|AUTH_(GSSNEGOTIATE|BASIC|NTLM|DIGEST|ANY(SAFE)?))|I(MAGETYPE_(GIF|XBM|BMP|SWF|COUNT|TIFF_(MM|II)|I(CO|FF)|UNKNOWN|J(B2|P(X|2|C|EG(2000)?))|P(SD|NG)|WBMP)|NPUT_(REQUEST|GET|SE(RVER|SSION)|COOKIE|POST|ENV)|CONV_(MIME_DECODE_(STRICT|CONTINUE_ON_ERROR)|IMPL|VERSION))|D(NS_(MX|S(RV|OA)|HINFO|N(S|APTR)|CNAME|TXT|PTR|A(NY|LL|AAA|6)?)|OM(STRING_SIZE_ERR|_(SYNTAX_ERR|HIERARCHY_REQUEST_ERR|N(O(_(MODIFICATION_ALLOWED_ERR|DATA_ALLOWED_ERR)|T_(SUPPORTED_ERR|FOUND_ERR))|AMESPACE_ERR)|IN(DEX_SIZE_ERR|USE_ATTRIBUTE_ERR|VALID_(MODIFICATION_ERR|STATE_ERR|CHARACTER_ERR|ACCESS_ERR))|PHP_ERR|VALIDATION_ERR|WRONG_DOCUMENT_ERR)))|JSON_(HEX_(TAG|QUOT|A(MP|POS))|NUMERIC_CHECK|ERROR_(S(YNTAX|TATE_MISMATCH)|NONE|CTRL_CHAR|DEPTH|UTF8)|FORCE_OBJECT)|P(REG_(RECURSION_LIMIT_ERROR|GREP_INVERT|BA(CKTRACK_LIMIT_ERROR|D_UTF8_(OFFSET_ERROR|ERROR))|S(PLIT_(NO_EMPTY|OFFSET_CAPTURE|DELIM_CAPTURE)|ET_ORDER)|NO_ERROR|INTERNAL_ERROR|OFFSET_CAPTURE|PATTERN_ORDER)|SFS_(PASS_ON|ERR_FATAL|F(EED_ME|LAG_(NORMAL|FLUSH_(CLOSE|INC))))|CRE_VERSION|OSIX_(R_OK|X_OK|S_IF(REG|BLK|SOCK|CHR|IFO)|F_OK|W_OK))|F(NM_(NOESCAPE|CASEFOLD|P(ERIOD|ATHNAME))|IL(TER_(REQUIRE_(SCALAR|ARRAY)|SANITIZE_(MAGIC_QUOTES|S(TRI(NG|PPED)|PECIAL_CHARS)|NUMBER_(INT|FLOAT)|URL|E(MAIL|NCODED)|FULL_SPECIAL_CHARS)|NULL_ON_FAILURE|CALLBACK|DEFAULT|UNSAFE_RAW|VALIDATE_(REGEXP|BOOLEAN|I(NT|P)|URL|EMAIL|FLOAT)|F(ORCE_ARRAY|LAG_(S(CHEME_REQUIRED|TRIP_(BACKTICK|HIGH|LOW))|HOST_REQUIRED|NO(NE|_(RES_RANGE|PRIV_RANGE|ENCODE_QUOTES))|IPV(4|6)|PATH_REQUIRED|E(MPTY_STRING_NULL|NCODE_(HIGH|LOW|AMP))|QUERY_REQUIRED|ALLOW_(SCIENTIFIC|HEX|THOUSAND|OCTAL|FRACTION))))|E(_(BINARY|SKIP_EMPTY_LINES|NO_DEFAULT_CONTEXT|TEXT|IGNORE_NEW_LINES|USE_INCLUDE_PATH|APPEND)|INFO_(RAW|MIME(_(TYPE|ENCODING))?|SYMLINK|NONE|CONTINUE|DEVICES|PRESERVE_ATIME)))|ORCE_(GZIP|DEFLATE))|LIBXML_(XINCLUDE|N(SCLEAN|O(XMLDECL|BLANKS|NET|CDATA|E(RROR|MPTYTAG|NT)|WARNING))|COMPACT|D(TD(VALID|LOAD|ATTR)|OTTED_VERSION)|PARSEHUGE|ERR_(NONE|ERROR|FATAL|WARNING)|VERSION|LOADED_VERSION))\b
          scope: support.constant.ext.php
          captures:
            1: punctuation.separator.namespace.php
        - match: (\\)?\bT_(RE(TURN|QUIRE(_ONCE)?)|G(OTO|LOBAL)|XOR_EQUAL|M(INUS_EQUAL|OD_EQUAL|UL_EQUAL|ETHOD_C|L_COMMENT)|B(REAK|OOL(_CAST|EAN_(OR|AND))|AD_CHARACTER)|S(R(_EQUAL)?|T(RING(_(CAST|VARNAME))?|A(RT_HEREDOC|TIC))|WITCH|L(_EQUAL)?)|HALT_COMPILER|N(S_(SEPARATOR|C)|UM_STRING|EW|AMESPACE)|C(HARACTER|O(MMENT|N(ST(ANT_ENCAPSED_STRING)?|CAT_EQUAL|TINUE))|URLY_OPEN|L(O(SE_TAG|NE)|ASS(_C)?)|A(SE|TCH))|T(RY|HROW)|I(MPLEMENTS|S(SET|_(GREATER_OR_EQUAL|SMALLER_OR_EQUAL|NOT_(IDENTICAL|EQUAL)|IDENTICAL|EQUAL))|N(STANCEOF|C(LUDE(_ONCE)?)?|T(_CAST|ERFACE)|LINE_HTML)|F)|O(R_EQUAL|BJECT_(CAST|OPERATOR)|PEN_TAG(_WITH_ECHO)?|LD_FUNCTION)|D(NUMBER|I(R|V_EQUAL)|O(C_COMMENT|UBLE_(C(OLON|AST)|ARROW)|LLAR_OPEN_CURLY_BRACES)?|E(C(LARE)?|FAULT))|U(SE|NSET(_CAST)?)|P(R(I(NT|VATE)|OTECTED)|UBLIC|LUS_EQUAL|AAMAYIM_NEKUDOTAYIM)|E(X(TENDS|IT)|MPTY|N(CAPSED_AND_WHITESPACE|D(SWITCH|_HEREDOC|IF|DECLARE|FOR(EACH)?|WHILE))|CHO|VAL|LSE(IF)?)|VAR(IABLE)?|F(I(NAL|LE)|OR(EACH)?|UNC(_C|TION))|WHI(TESPACE|LE)|L(NUMBER|I(ST|NE)|OGICAL_(XOR|OR|AND))|A(RRAY(_CAST)?|BSTRACT|S|ND_EQUAL))\b
          scope: support.constant.parser-token.php
          captures:
            1: punctuation.separator.namespace.php
        # In PHP, any identifier which is not a variable is taken to be a constant.
        # However, if there is no constant defined with the given name then a notice
        # is generated and the constant is assumed to have the value of its name.
        - match: '{{identifier}}'
          scope: constant.other.php

  interpolation:
    - match: '\\[0-7]{1,3}'
      scope: constant.character.escape.octal.php
    - match: '\\x[0-9A-Fa-f]{1,2}'
      scope: constant.character.escape.hex.php
    - match: '\\u\{[0-9A-Fa-f]+\}'
      scope: constant.character.escape.unicodepoint.php
    - match: '\\[nrt\\\$\"]'
      scope: constant.character.escape.php
    - match: '(\{)(?=\$.*?\})'
      captures:
        1: punctuation.definition.expression.php
      push:
        - match: '(\})'
          captures:
            1: punctuation.definition.expression.php
          pop: true
        - include: expressions
    # Handles: "foo${bar}baz"
    - match: '(\$\{){{identifier}}(\})'
      scope: variable.other.php
      captures:
        1: punctuation.definition.variable.php
        2: punctuation.definition.variable.php
    - match: '(\$\{)(?=.*?\})'
      captures:
        1: punctuation.definition.variable.php
      push:
        - match: '(\})'
          captures:
            1: punctuation.definition.variable.php
          pop: true
        - include: expressions
    # Handles: $foo, $foo[0], $foo[$bar], $foo->bar
    - match: |-
        (?x:
          (?=
            \${{identifier}}
            (?:
                ->{{identifier}}
                |
                \[ ( \d+ | \$?{{identifier}} ) \]
            )
          )
        )
      push:
        - match: (->)({{identifier}})
          captures:
            1: keyword.operator.class.php
            2: variable.other.member.php
          pop: true
        - match: '\['
          scope: meta.item-access.php punctuation.section.brackets.begin.php
          set:
            - meta_content_scope: meta.item-access.arguments.php
            - match: '\]'
              scope: meta.item-access.php punctuation.section.brackets.end.php
              pop: true
            - include: numbers
            - include: variables
            - match: '{{identifier}}'
              scope: constant.other.php
        - include: variables-no-item-access
    - include: variables

  identifier-parts:
    - match: (\\)?({{identifier}})(\\)
      captures:
        1: punctuation.separator.namespace.php
        2: support.other.namespace.php
        3: punctuation.separator.namespace.php

  function-call:
    # Functions in a user-defined namespace should only be highlighted as user,
    # any built-in function names should not be highlighted specially
    - match: '(?={{path}}\\{{identifier}}\s*\()'
      push:
        - meta_scope: meta.function-call.php
        - meta_content_scope: meta.path.php
        - include: identifier-parts
        - match: '{{identifier}}(?=\s*\()'
          scope: variable.function.php
          set: function-call-parameters
    - match: (?i)\b(print|echo)\b
      scope: support.function.construct.php
    # Root namespace function calls may be a built-in or user
    - match: '(\\)?(?={{identifier}}\s*\()'
      captures:
        1: punctuation.separator.namespace.php
      push:
        - meta_scope: meta.function-call.php
        - match: (?=\s*\()
          set: function-call-parameters
        - match: (?i)\b(isset|unset|e(val|mpty)|list)\b
          scope: support.function.construct.php
        - include: support
        - match: '{{identifier}}'
          scope: variable.function.php

  function-call-parameters:
    - match: \s*(\()
      scope: meta.function-call.php
      captures:
        1: meta.group.php punctuation.section.group.begin.php
      set:
        - meta_content_scope: meta.function-call.php meta.group.php
        - match: \)
          scope: meta.function-call.php meta.group.php punctuation.section.group.end.php
          pop: true
        - match: ','
          scope: punctuation.separator.php
        - include: expressions
